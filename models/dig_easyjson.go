// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBf0b4e4eDecodeGoldenModels(in *jlexer.Lexer, out *Dig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "depth":
			if in.IsNull() {
				in.Skip()
				out.Depth = nil
			} else {
				if out.Depth == nil {
					out.Depth = new(int64)
				}
				*out.Depth = int64(in.Int64())
			}
		case "licenseID":
			if in.IsNull() {
				in.Skip()
				out.LicenseID = nil
			} else {
				if out.LicenseID == nil {
					out.LicenseID = new(int64)
				}
				*out.LicenseID = int64(in.Int64())
			}
		case "posX":
			if in.IsNull() {
				in.Skip()
				out.PosX = nil
			} else {
				if out.PosX == nil {
					out.PosX = new(int64)
				}
				*out.PosX = int64(in.Int64())
			}
		case "posY":
			if in.IsNull() {
				in.Skip()
				out.PosY = nil
			} else {
				if out.PosY == nil {
					out.PosY = new(int64)
				}
				*out.PosY = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBf0b4e4eEncodeGoldenModels(out *jwriter.Writer, in Dig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"depth\":"
		out.RawString(prefix[1:])
		if in.Depth == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Depth))
		}
	}
	{
		const prefix string = ",\"licenseID\":"
		out.RawString(prefix)
		if in.LicenseID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.LicenseID))
		}
	}
	{
		const prefix string = ",\"posX\":"
		out.RawString(prefix)
		if in.PosX == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.PosX))
		}
	}
	{
		const prefix string = ",\"posY\":"
		out.RawString(prefix)
		if in.PosY == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.PosY))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Dig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBf0b4e4eEncodeGoldenModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Dig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBf0b4e4eEncodeGoldenModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Dig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBf0b4e4eDecodeGoldenModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Dig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBf0b4e4eDecodeGoldenModels(l, v)
}
