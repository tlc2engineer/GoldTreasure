// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBd361432DecodeGoldenModels(in *jlexer.Lexer, out *Report) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			if in.IsNull() {
				in.Skip()
				out.Amount = nil
			} else {
				if out.Amount == nil {
					out.Amount = new(Amount)
				}
				*out.Amount = Amount(in.Int64())
			}
		case "area":
			if in.IsNull() {
				in.Skip()
				out.Area = nil
			} else {
				if out.Area == nil {
					out.Area = new(Area)
				}
				easyjsonBd361432DecodeGoldenModels1(in, out.Area)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd361432EncodeGoldenModels(out *jwriter.Writer, in Report) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		if in.Amount == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Amount))
		}
	}
	{
		const prefix string = ",\"area\":"
		out.RawString(prefix)
		if in.Area == nil {
			out.RawString("null")
		} else {
			easyjsonBd361432EncodeGoldenModels1(out, *in.Area)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Report) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd361432EncodeGoldenModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Report) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd361432EncodeGoldenModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Report) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd361432DecodeGoldenModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Report) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd361432DecodeGoldenModels(l, v)
}
func easyjsonBd361432DecodeGoldenModels1(in *jlexer.Lexer, out *Area) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "posX":
			if in.IsNull() {
				in.Skip()
				out.PosX = nil
			} else {
				if out.PosX == nil {
					out.PosX = new(int64)
				}
				*out.PosX = int64(in.Int64())
			}
		case "posY":
			if in.IsNull() {
				in.Skip()
				out.PosY = nil
			} else {
				if out.PosY == nil {
					out.PosY = new(int64)
				}
				*out.PosY = int64(in.Int64())
			}
		case "sizeX":
			out.SizeX = int64(in.Int64())
		case "sizeY":
			out.SizeY = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd361432EncodeGoldenModels1(out *jwriter.Writer, in Area) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"posX\":"
		out.RawString(prefix[1:])
		if in.PosX == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.PosX))
		}
	}
	{
		const prefix string = ",\"posY\":"
		out.RawString(prefix)
		if in.PosY == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.PosY))
		}
	}
	if in.SizeX != 0 {
		const prefix string = ",\"sizeX\":"
		out.RawString(prefix)
		out.Int64(int64(in.SizeX))
	}
	if in.SizeY != 0 {
		const prefix string = ",\"sizeY\":"
		out.RawString(prefix)
		out.Int64(int64(in.SizeY))
	}
	out.RawByte('}')
}
