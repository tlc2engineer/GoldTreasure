// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Dig dig
//
// swagger:model dig
type Dig struct {

	// depth
	// Required: true
	// Maximum: 100
	// Minimum: 1
	Depth *int64 `json:"depth"`

	// ID of the license this request is attached to.
	// Required: true
	LicenseID *int64 `json:"licenseID"`

	// pos x
	// Required: true
	// Minimum: 0
	PosX *int64 `json:"posX"`

	// pos y
	// Required: true
	// Minimum: 0
	PosY *int64 `json:"posY"`
}

// Validate validates this dig
func (m *Dig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosX(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosY(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dig) validateDepth(formats strfmt.Registry) error {

	if err := validate.Required("depth", "body", m.Depth); err != nil {
		return err
	}

	if err := validate.MinimumInt("depth", "body", *m.Depth, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("depth", "body", *m.Depth, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *Dig) validateLicenseID(formats strfmt.Registry) error {

	if err := validate.Required("licenseID", "body", m.LicenseID); err != nil {
		return err
	}

	return nil
}

func (m *Dig) validatePosX(formats strfmt.Registry) error {

	if err := validate.Required("posX", "body", m.PosX); err != nil {
		return err
	}

	if err := validate.MinimumInt("posX", "body", *m.PosX, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Dig) validatePosY(formats strfmt.Registry) error {

	if err := validate.Required("posY", "body", m.PosY); err != nil {
		return err
	}

	if err := validate.MinimumInt("posY", "body", *m.PosY, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dig based on context it is used
func (m *Dig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Dig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dig) UnmarshalBinary(b []byte) error {
	var res Dig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
